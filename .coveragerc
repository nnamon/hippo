[run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    setup.py
    conftest.py

[report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
    if TYPE_CHECKING:

    # Don't complain about abstract methods, they aren't run:
    @(abc\.)?abstractmethod

    # Exclude Telegram bot infrastructure and startup code
    # Bot application setup and lifecycle
    Application\.builder\(\)\.token\(.*\)\.build\(\)
    \.run_polling\(\)
    self\.application = 
    self\.job_queue = 

    # Environment and configuration setup
    import os
    os\.getenv\(
    db_path = 

    # Job scheduling and background tasks
    self\.job_queue\.run_.*
    \.schedule_removal\(\)
    when=\d+

    # Error logging that's hard to trigger
    logger\.error\(
    logger\.exception\(
    except Exception as e:

    # Telegram API calls that require real bot context
    await context\.bot\.
    context\.application\.
    \.edit_message_text\(.*parse_mode.*\)

    # Complex callback routing infrastructure
    elif query\.data\.startswith\(
    callback_data = query\.data\.replace\(

ignore_errors = True
show_missing = True
precision = 1

[html]
directory = htmlcov

[xml]
output = coverage.xml