# .github/workflows/ci.yml  ▸ drop-in replacement
name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
# -------------------------------------------------
# 1) Lint & quick unit tests  (fast feedback in PRs)
# -------------------------------------------------
  quick-checks:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with: { python-version: ${{ env.PYTHON_VERSION }} }

      - uses: actions/cache@v3           # same cache key as old workflow
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt flake8

      - name: flake8 (fail-fast)
        run: flake8 src/ tests/

      - name: Fast unit tests
        run: pytest tests/ -q -x
        env: { PYTHONPATH: ${{ github.workspace }}/src }

# -------------------------------------------------
# 2) Full test matrix, integration + coverage
# -------------------------------------------------
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build test image
        run: docker build -f Dockerfile.test -t hippo-test:latest .

      - name: Run full test & coverage inside container
        run: |
          docker run --rm \
            -u "$(id -u):$(id -g)" \
            -v "$PWD:/workspace" \
            -w /workspace \
            hippo-test:latest \
            pytest -v --tb=short \
                   --cov=src \
                   --cov-report=xml:coverage.xml \
                   --cov-report=json:coverage.json \
                   --cov-report=term-missing \
                   --cov-fail-under=55 \
                   --cov-branch \
                   tests/
      - name: Upload coverage artefacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage.xml
            coverage.json
          retention-days: 30

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Generate coverage comment
        if: github.event_name == 'pull_request'
        run: python scripts/generate_coverage_comment.py > coverage_comment.md

      - name: Post / update coverage comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('coverage_comment.md', 'utf8');
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const bot = comments.find(c => c.user.type === 'Bot' && c.body.includes('Coverage Report'));
            if (bot) {
              await github.rest.issues.updateComment({ ...context.repo, comment_id: bot.id, body: comment });
            } else {
              await github.rest.issues.createComment({ ...context.repo, issue_number: context.issue.number, body: comment });
            }

# -------------------------------------------------
# 3) Security scanners (Bandit + Safety)
# -------------------------------------------------
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with: { python-version: ${{ env.PYTHON_VERSION }} }

      - name: Bandit + Safety
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          bandit -r src/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

# -------------------------------------------------
# 4) Unified summary  (always runs)
# -------------------------------------------------
  summary:
    runs-on: ubuntu-latest
    needs: [quick-checks, tests, security]
    if: always()
    steps:
      - name: CI results
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Result |"  >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|"  >> $GITHUB_STEP_SUMMARY
          echo "| Quick PR checks | ${{ needs.quick-checks.result }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| Full tests & coverage | ${{ needs.tests.result }} |"   >> $GITHUB_STEP_SUMMARY
          echo "| Security scan | ${{ needs.security.result }} |"        >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.tests.result }}" != "success" ]]; then
            echo "❌ Tests or coverage failed." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

