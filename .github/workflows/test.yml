name: Run Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Lint with flake8 (optional)
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
      continue-on-error: true

    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing --cov-report=html --cov-fail-under=55 --cov-branch
      env:
        # Prevent interactive prompts during testing
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true
      
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-unit
        path: |
          coverage.xml
          htmlcov/
          coverage.json
        retention-days: 30
      if: always()

  test-docker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker test image
      run: |
        docker build -f Dockerfile.test -t hippo-test:latest .

    - name: Run tests in Docker
      run: |
        docker run --rm \
          hippo-test:latest \
          pytest tests/ -v --tb=short --cov=src --cov-report=term-missing --cov-fail-under=55

    - name: Test Docker production build
      run: |
        docker build -t hippo-bot:test .
        # Test that the container can start (but don't actually run the bot)
        docker run --rm --entrypoint python hippo-bot:test -c "
        import sys
        sys.path.append('src')
        from bot.hippo_bot import HippoBot
        from database.models import DatabaseManager
        from content.manager import ContentManager
        print('✅ All imports successful')
        "

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -ll
      continue-on-error: true

    - name: Check dependencies for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  integration:
    runs-on: ubuntu-latest
    needs: [test, test-docker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Run integration tests
      run: |
        # Create a mock integration test that tests the full bot initialization
        python -c "
        import asyncio
        import sys
        import tempfile
        import os
        sys.path.append('src')
        
        async def test_full_bot_integration():
            from database.models import DatabaseManager
            from content.manager import ContentManager
            from bot.reminder_system import ReminderSystem
            from bot.hippo_bot import HippoBot
            
            # Test database operations
            with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp:
                db_path = tmp.name
            
            db = DatabaseManager(db_path)
            await db.initialize()
            
            # Test content manager
            content_manager = ContentManager()
            assert len(content_manager.poems) > 0
            assert len(content_manager.themes) > 0
            
            # Test reminder system
            reminder_system = ReminderSystem(db, content_manager)
            
            # Test bot initialization (without actually connecting)
            # bot = HippoBot('fake_token_for_testing')
            
            await db.close()
            os.unlink(db_path)
            print('✅ Integration test passed!')
        
        asyncio.run(test_full_bot_integration())
        "

  notify:
    runs-on: ubuntu-latest
    needs: [test, test-docker, security, integration]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Tests | ${{ needs.test-docker.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Checks | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test.result }}" == "failure" ] || [ "${{ needs.test-docker.result }}" == "failure" ] || [ "${{ needs.integration.result }}" == "failure" ]; then
          echo "❌ Some tests failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        fi