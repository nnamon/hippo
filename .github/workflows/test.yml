name: Run Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Lint with flake8 (optional)
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
      continue-on-error: true

    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing --cov-report=html --cov-report=json --cov-fail-under=55 --cov-branch
      env:
        # Prevent interactive prompts during testing
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true
      
    - name: Generate coverage comment
      if: github.event_name == 'pull_request'
      run: |
        echo "Checking for coverage.json file..."
        ls -la coverage.json || echo "coverage.json not found"
        echo "Running coverage comment script..."
        python scripts/generate_coverage_comment.py > coverage_comment.md
        echo "Coverage comment generated"
        cat coverage_comment.md
    
    - name: Post coverage comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverageComment = fs.readFileSync('coverage_comment.md', 'utf8');
          
          // Find existing coverage comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Coverage Report')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: coverageComment
            });
            console.log('Updated existing coverage comment');
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: coverageComment
            });
            console.log('Created new coverage comment');
          }
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-unit
        path: |
          coverage.xml
          htmlcov/
          coverage.json
          coverage_comment.md
        retention-days: 30
      if: always()

  test-docker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker test image
      run: |
        docker build -f Dockerfile.test -t hippo-test:latest .

    - name: Run unit tests in Docker
      run: |
        docker run --rm hippo-test:latest

    - name: Run integration tests in Docker
      run: |
        docker run --rm hippo-test:latest python scripts/integration_test.py

    - name: Test Docker production build
      run: |
        docker build -t hippo-bot:test .
        docker run --rm hippo-bot:test python -c "
        import sys
        sys.path.append('src')
        from bot.hippo_bot import HippoBot
        from database.models import DatabaseManager
        from content.manager import ContentManager
        print('✅ All production imports successful')
        "

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -ll
      continue-on-error: true

    - name: Check dependencies for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  notify:
    runs-on: ubuntu-latest
    needs: [test, test-docker, security]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Tests (including integration) | ${{ needs.test-docker.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Checks | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test.result }}" == "failure" ] || [ "${{ needs.test-docker.result }}" == "failure" ]; then
          echo "❌ Some tests failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        fi